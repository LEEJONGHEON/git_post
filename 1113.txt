소스코드 -> 컴파일 , 의존성관리 : 빌드도구
그룹ID : 고유 ID로 설정해야함 ex)보통 도메인주소로 설정
아티팩트ID : 프로젝트의 별칭
0.캡슐화 : 객체 데이터의 잘못된 조작을 막고, 올바른 동작을 유도 ex) 자동차엔진, 엔진캡슐화되서 시동만걸면자동작동
정보은닉 : 외부에서 필드값이 변경되도 에러발생하지않으므로, 변경안되도록 제어 ex) 자동차 엔진은 은닉화되서 안에있음

1.다형성 :

2.추상화 : 필수기능을 추상화해서, 상속받은 객체가 해당 기능을 무조건 구체화되도록 통제
ex) 자동차->추상적, SUV -> 구체적
추상 class 는 객체 생성 못함 
추상 함수 -> 각 상속받은 객체가 직접 구체화해서 구현해라 Override

인터페이스 :
함수 선언시
public abstract 가 자동으로 붙음
인터페이스 선언 -> 인터페이스를 상속받은 모든 객체는 해당 인터페이스의 특징을 가짐

객체 : 특성 + 동작
인터페이스로 특성이나 동작을 분리하여 따로 구현해서
해당 값이 필요한곳에서 implements해서 사용
추상적으로 같은 기능 -> 실제 해당 클래스에서 구체화 해서 사용
ex) 고양이 강아지 eatable, playable 특성을 가지고있음
인터페이스로 공통점 정의해둔뒤 실제 class에서 구체화강제 하기
만약 동일 특성을 여러군데에서 바꿔야하는데, 만약 인터페이스가 아니라, 각 개체를 직접구현하면, 모든 객체의 값을 수정해야함 
만약 각 차들마다 브레이크 기능의 이름이 다르면, 각 객체를 수정하는데 시간이 더소모됨